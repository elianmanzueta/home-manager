#+TITLE: Elian's Doom Emacs Config
#+auto_tangle: t
#+STARTUP: overview

* Configuration
** Auto-fill Mode
#+BEGIN_SRC emacs-lisp :tangle ./config.el
(add-hook 'text-mode-hook #'auto-fill-mode)
(setq-default fill-column 80)
#+END_SRC
** Avy
#+begin_src emacs-lisp :tangle ./config.el
(setq avy-timeout-seconds 0.35)
(setq avy-all-windows t)
(evil-define-key 'normal 'global (kbd "s") 'avy-goto-char-2)
(after! evil-snipe
  (setq evil-snipe-scope 'whole-visible)
  (setq evil-snipe-smart-case t)
  (evil-define-key '(normal motion) evil-snipe-local-mode-map
    "s" nil
    "S" nil)
  (evil-define-key 'normal 'global (kbd "s") 'avy-goto-char-2))
#+end_src
** Centaur Tabs
#+begin_src emacs-lisp :tangle ./config.el
(use-package! centaur-tabs
  :defer t
  :init
  (setq centaur-tabs-set-close-button nil)
  (setq centaur-tabs-set-bar 'right)
  )
#+end_src
** Checkers
#+begin_src emacs-lisp :tangle yes
(use-package! flymake
  :hook (prog-mode . flymake-mode)
  :config
  (setq flymake-show-diagnostics-at-end-of-line 'short)
  (setq flymake-popon-mode nil))

;; (use-package! flyover
;;   :hook (flycheck-mode-hook . flyover-mode)
;;   :config
;;   (setq flyover-use-theme-colors t)
;;   (setq flyover-base-height 1.0))

;; (custom-set-faces
;;  '(flyover-warning ((t (:inherit warning :weight normal :height 0.9))))
;;  '(flyover-error ((t (:inherit error :weight normal :height 0.9))))
;;  '(flyover-marker ((t (:inherit error :weight normal :height 0.9))))
;;  '(flyover-info ((t (:inherit error :weight normal :height 0.9)))))
#+end_src
** Code
Keybind to enable inlay hints
#+begin_src emacs-lisp :tangle ./config.el
;; (map! :leader :desc "Inlay hints mode" "t h" #'lsp-inlay-hints-mode)
#+end_src
*** Go
**** Gopls
***** Inlay hints
#+begin_src emacs-lisp :tangle ./config.el
(after! lsp-mode
  (lsp-register-custom-settings
   '(("gopls.hints" ((assignVariableTypes . t)
                     (compositeLiteralFields . t)
                     (compositeLiteralTypes . t)
                     (constantValues . t)
                     (functionTypeParameters . t)
                     (parameterNames . t)
                     (rangeVariableTypes . t))))))
#+end_src
** Completion preview mode
#+begin_src emacs-lisp :tangle ./config.el
(use-package completion-preview
  :hook
  ((prog-mode text-mode eshell-mode) . completion-preview-mode)
  :config
  (setq completion-preview-minimum-symbol-length 3)
  (setq completion-preview-completion-styles '(basic partial-completion))
  )
#+end_src
** Dashboard
#+begin_src emacs-lisp :tangle ./config.el
(setq +doom-dashboard-pwd-policy "~/")
#+end_src
** Dirvish
#+BEGIN_SRC emacs-lisp :tangle ./config.el
(use-package! nerd-icons)
(use-package! dirvish
  :defer t
  :config
  (setq dirvish-attributes
        '(nerd-icons vc-state subtree-state collapse git-msg file-size file-time)
        dirvish-side-attributes
        '(vc-state nerd-icons collapse file-size))
  (setq dirvish-default-layout '(0 0.50 0.50))
  (setq dirvish-time-format-string "%d-%m-%y %I:%S:%p %Z")
  (setq dired-use-ls-dired 't)
  (setq dirvish-peek-mode 't)
  (when (and (eq system-type 'darwin) (executable-find "gls"))
    (setq insert-directory-program "gls")))

(map! :leader "e" #'dirvish)
#+END_SRC
** Doom
#+begin_src emacs-lisp :tangle ./config.el
(setq doom-font (font-spec :family "IosevkaTerm Nerd Font Mono" :size 16 :weight 'medium))
(setq doom-emoji-font "Noto Color Emoji")
(setq doom-symbol-font "Symbols Nerd Font Mono")
(setq doom-theme 'doom-gruvbox)
#+end_src
** EAT
#+begin_src emacs-lisp :tangle ./config.el
(use-package! eat
  :defer t
  :init
  (setq process-adaptive-read-buffering nil) ; makes EAT a lot quicker!
  (setq eat-term-name "xterm-256color")) ; https://codeberg.org/akib/emacs-eat/issues/119"

(add-hook 'eshell-load-hook #'eat-eshell-mode)
(add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)
(add-hook 'eshell-mode-hook (lambda () (setenv "TERM" "xterm-256color")))
#+end_src
** Eshell
#+begin_src emacs-lisp :tangle yes
;; (defun +eshell-default-prompt-fn ()
;;   "Generate the prompt string for eshell. Use for `eshell-prompt-function'."
;;   (require 'shrink-path)
;;   (concat (if (bobp) "" "\n")
;;           (propertize (eshell-user-login-name) 'face 'nerd-icons-green)
;;           (propertize " in " 'face '+eshell-prompt-pwd)

;;           (let ((pwd (eshell/pwd)))
;;             (propertize (if (equal pwd "~")
;;                             pwd
;;                           (abbreviate-file-name pwd))
;;                         'face 'nerd-icons-green))

;;           "\n"
;;           (propertize "$" 'face (if (zerop eshell-last-command-status) 'success 'error))
;;           " "))

(set-eshell-alias!
 "ls" "ls -lhaF --color=auto"
 "gst" "git status"
 "gcsm" "git commit --signoff --message")

(setq vterm-tramp-shells '(("ssh" "/bin/bash") ("scp" "/bin/bash") ("docker" "/bin/sh")))
#+end_src
** Eglot
#+begin_src emacs-lisp :tangle yes
;; (use-package eglot-booster
;;   :after eglot
;;   :config
;;   (setq eglot-booster-mode t)
;;   (setq eglot-booster-io-only t))
#+end_src
** Faces
*** Custom
#+begin_src emacs-lisp :tangle ./config.el
(after! org
  (custom-set-faces!
    '(outline-1 :weight bold :height 1.25)
    '(outline-2 :weight bold :height 1.15)
    '(outline-3 :weight bold :height 1.12)
    '(outline-4 :weight semi-bold :height 1.09)
    '(outline-5 :weight semi-bold :height 1.06)
    '(outline-6 :weight semi-bold :height 1.03)
    '(outline-8 :weight semi-bold)
    '(outline-9 :weight semi-bold)
    '(org-document-title :weight extra-bold :height 1.5)
    '(org-verbatim :inherit bold :weight extra-bold)))
#+end_src
** gptel
#+begin_src emacs-lisp :tangle ./config.el
(use-package! gptel
  :defer t
  :config
  (setq gptel-api-key (lambda () (shell-command-to-string "cat ~/.authinfo")))
  (setq
   gptel-model   'sonar
   gptel-backend (gptel-make-perplexity "Perplexity"
                   :key (lambda () (shell-command-to-string "cat ~/.authinfo-perplexity"))
                   :stream t))

  (setq gptel-default-mode #'org-mode)

  (setq gptel-prompt-prefix-alist
        '((markdown-mode . "# Prompt:\n")
          (org-mode . "* Prompt:\n")
          (text-mode . "Prompt:\n "))
        )

  (setq gptel-response-prefix-alist
        '((markdown-mode . "# Response:\n")
          (org-mode . "* Response:\n")
          (text-mode . "Response:\n"))
        )

  (setq gptel-directives
        '((default
           . "You are a large language model living in Emacs and a helpful assistant. Respond concisely. If needed, ask for clarification on questions.")
          (programming
           . "You are a large language model and a careful programmer. Provide code and only code as output without any additional text, prompt or note.")
          (writing
           . "You are a large language model and a writing assistant. Respond concisely.")
          (chat
           . "You are a large language model and a conversation partner. Respond concisely."))
        ))
#+end_src
** Graphviz
Tweak to make previews work
#+begin_src emacs-lisp :tangle yes
(use-package! graphviz-dot-mode
  :defer t
  :config
  (setq graphviz-dot-preview-extension "svg"))
#+end_src
** Indent Bars Mode
#+begin_src emacs-lisp :tangle ./config.el
(add-hook 'lsp-mode-hook #'indent-bars-mode)
#+end_src
*** Justfiles
**** just-mode
#+begin_src emacs-lisp :tangle ./config.el
(use-package just-mode
  :defer t
  :mode ("justfile\\'" . just-mode)
  :config
  (setq just-indent-offset 4))
#+end_src
*** LSP
#+begin_src emacs-lisp :tangle ./config.el
(setq lsp-idle-delay 0.3)
(setq corfu-auto-delay 0.2)
(setq which-key-idle-delay 0.5)

(setq lsp-ui-imenu-auto-refresh t)
(setq lsp-ui-imenu-buffer-position 'right)
#+end_src

*** Powershell
#+begin_src emacs-lisp :tangle yes
(use-package! powershell
  :mode ("\\.ps1\\'" . powershell-mode)
  :hook (powershell-mode . lsp-mode)
  :config
  (setq powershell-location-of-exe "/mnt/c/Program Files/Powershell/7/pwsh.exe"))

(use-package! powershell-ts-mode)
#+end_src
*** Python
Enable inlay hints in Python
#+begin_src emacs-lisp :tangle ./config.el
;; (use-package! lsp-pyright
;;   ;; :hook (python-mode . lsp-inlay-hints-mode)
;;   :config
;;   (setq lsp-pyright-basedpyright-inlay-hints-generic-types t)
;;   (setq lsp-pyright-basedpyright-inlay-hints-variable-types t)
;;   (setq lsp-pyright-basedpyright-inlay-hints-call-argument-names t)
;;   (setq lsp-pyright-basedpyright-inlay-hints-function-return-types t)

;;   (setq lsp-pyright-langserver-command "basedpyright")
;;   (setq lsp-pyright-type-checking-mode "basic")

;;   (setq lsp-pyright-venv-path ".")
;;   (setq lsp-pyright-venv-directory ".venv"))
#+end_src

Enable Ruff
#+begin_src emacs-lisp :tangle ./config.el
(setq-hook! 'python-mode-hook +format-with 'ruff)
(use-package! flymake-ruff)
#+end_src

Disable popup tips
#+begin_src emacs-lisp :tangle ./config.el
(setq flycheck-popup-tip-mode nil)
#+end_src
*** Rust
**** Inlay hints
Enable inlay hints in Rust
#+begin_src emacs-lisp :tangle ./config.el
(setq lsp-rust-analyzer-display-chaining-hints t)
(setq lsp-rust-analyzer-display-closure-return-type-hints t)
(setq lsp-rust-analyzer-display-parameter-hints t)
#+end_src
** Kill-ring
#+BEGIN_SRC emacs-lisp :tangle ./config.el
(map! :leader "y" #'yank-from-kill-ring)
#+END_SRC
** Misc
#+begin_src emacs-lisp :tangle ./config.el
(setq user-full-name "Elian Manzueta")
(setq user-mail-address "elianmanzueta@protonmail.com")

(setq auto-save-default t
      make-backup-files t)
(setq confirm-kill-emacs nil)
(setq display-line-numbers-type 'relative)
(setq evil-shift-width 2)
(setq projectile-project-search-path
      '(("~/projects/" . 3)))

(setq-default
 delete-by-moving-to-trash t)

(after! which-key
  (setq which-key-idle-delay 0.05))
#+end_src

#+begin_src emacs-lisp :tangle ./config.el
(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      )

(display-time-mode 1)
#+end_src

Set the Scratch buffer's initial mode to org mode.
#+begin_src emacs-lisp :tangle ./config.el
(setq doom-scratch-initial-major-mode 'lisp-interaction-mode)
(setq initial-scratch-message "")
#+end_src

Focus new window after splitting.
#+begin_src emacs-lisp :tangle ./config.el
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src
** nov.el
#+begin_src emacs-lisp :tangle yes
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-variable-pitch nil))
#+end_src
** Orderless
#+begin_src emacs-lisp :tangle ./config.el
(use-package! orderless
  :defer t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion))))
  (orderless-matching-styles '(orderless-literal
                               orderless-regexp
                               )))
#+end_src

** Org
*** Agenda
**** Super Agenda
#+begin_src emacs-lisp :tangle ./config.el
(use-package! org-super-agenda
  :after org-agenda
  :config
  (setq org-agenda-start-day nil)
  (setq org-super-agenda-header-map (make-sparse-keymap))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-overriding-header "")
  (setq org-agenda-span 'day))


(setq org-agenda-custom-commands
      '(("n" "Super-agenda view"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t)))))

          (alltodo "" ((org-agenda-overriding-header "Inbox")
                       (org-super-agenda-groups
                        '((:name "Important"
                           :and (:priority>= "B" :tag "inbox")
                           :order 1)
                          (:name "In progress"
                           :and (:tag "inbox" :todo ("IN-PROGRESS"))
                           :order 2)
                          (:name "Entries"
                           :and (:todo "TODO" :tag "inbox")
                           :order 3)
                          (:name "On hold"
                           :and (:todo "HOLD" :tag "inbox")
                           :order 4)
                          (:name "Notes"
                           :todo "NOTE"
                           :order 5)
                          (:discard (:anything t))))))

          (todo "" ((org-agenda-overriding-header "Projects")
                    (org-super-agenda-groups
                     '((:name "Projects - Important"
                        :and (:todo ("TODO" "IN-PROGRESS") :tag "projects" :priority>= "B"))
                       (:name "Projects"
                        :and (:tag "projects" :todo ("TODO")))
                       (:name "Projects - On hold"
                        :and (:todo ("HOLD") :tag "projects"))
                       (:name "Notes"
                        :and (:tag "projects" :todo "NOTE"))
                       (:discard (:anything t))))))))))

(add-hook 'org-agenda-mode-hook 'org-super-agenda-mode)
#+end_src
*** Appearance

#+begin_src emacs-lisp :tangle ./config.el
(add-hook 'org-mode-hook '+org-pretty-mode)
(add-hook '+org-pretty-mode-hook 'org-appear-mode)
(add-hook 'org-mode-hook 'org-display-inline-images)
(add-hook 'org-mode-hook (lambda () (hl-line-mode -1)))
(add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1)))

(use-package! org
  :defer t
  :config
  (setq org-hide-emphasis-markers t
        org-fontify-quote-and-verse-blocks t
        org-auto-align-tags nil
        org-tags-column 0
        org-agenda-tags-column 0
        org-ellipsis " ▼"

        org-startup-folded 'content

        org-emphasis-alist '(("*" org-verbatim bold) ("/" italic) ("_" underline) ("=" org-verbatim verbatim)
                             ("~" org-code verbatim) ("+" (:strike-through t)))

        org-appear-autolinks t
        org-appear-autoentities t
        org-appear-autokeywords t
        ))

(use-package! org-modern
  :defer t
  :config
  (setq org-modern-star 'replace
        org-modern-replace-stars "◉○✸✿"
        org-modern-block-name nil
        org-modern-keyword nil
        ))

(use-package! org-agenda
  :after org
  :config
  (setq org-agenda-timegrid-use-ampm 't
        org-display-custom-times t
        org-time-stamp-custom-formats '("<%m/%d/%y %a>" . "<%m/%d/%y %a %I:%M %p>")))
#+end_src
*** Git auto commit and push
The Git-auto-commit mode in ~/org is enabled using ~/org/.dir-locals.el. Source
code here:
#+begin_src emacs-lisp
((nil . ((eval git-auto-commit-mode 1))))
#+end_src

Automatically push git changes.
#+begin_src emacs-lisp :tangle ./config.el
(use-package! git-auto-commit-mode
  :after org
  :config
  (setq gac-automatically-push-p 't
        gac-automatically-add-new-files-p 't
        gac-shell-and " ; and "))
#+end_src

*** Org and org agenda directories
#+begin_src emacs-lisp :tangle ./config.el
(setq org-directory "~/org/")
(setq org-agenda-files '("~/org/roam/daily/" "~/org/roam/professional/" "~/org/inbox.org"))
(setq org-log-done t)
(setq org-agenda-hide-tags-regexp "todo\\|work\\|workinfo\\|daily")
;; (setq org-agenda-prefix-format '((todo . " ")))
#+end_src
*** Org-anki
#+begin_src emacs-lisp :tangle ./config.el
(use-package! anki-editor
  :defer t)
(use-package! ankiorg
  :defer t)
#+end_src
*** Org attach
#+begin_src emacs-lisp :tangle ./config.el
(use-package! org-attach
  :after org
  :config
  (setq org-attach-auto-tag nil
        org-attach-store-link-p 'file
        org-attach-id-to-path-function-list '(org-attach-id-ts-folder-format
                                              org-attach-id-uuid-folder-format
                                              org-attach-id-fallback-folder-format)))
(setq org-id-method 'ts)
(setq org-id-ts-format "%Y-%m-%dT%H%M%S.%6N")
#+end_src
*** Ox-hugo
#+begin_src emacs-lisp :tangle yes
(use-package! ox-hugo
  :defer t)
#+end_src
*** Org auto tangle
#+begin_src emacs-lisp :tangle ./config.el
(use-package! org-auto-tangle
  :after org
  :hook (org-mode . org-auto-tangle-mode))
#+end_src
*** Org-download
#+begin_src emacs-lisp :tangle ./config.el
(use-package! org-download
  :after org
  :config
  (setq org-download-image-org-width '450))
#+end_src
*** Org capture
#+begin_src emacs-lisp :tangle yes
(setq +org-capture-todo-file "inbox.org")
#+end_src
*** Org roam
#+begin_src emacs-lisp :tangle yes
(use-package! org-roam
  :after org
  :config
  (setq org-roam-node-default-sort 'file-mtime
        org-roam-file-exclude-regexp (list "/home/elian/org.attach/")
        org-roam-completion-functions nil))
#+end_src
**** Capture templates
#+begin_src emacs-lisp :tangle ./config.el
(setq org-roam-capture-templates
      '(("d" "default" plain (file "~/org/roam/templates/default.org")
         :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+author: %n\n#+date: %t\n")
         :unnarrowed t)
        ("s" "study" plain (file "~/org/roam/templates/study.org")
         :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+author: %n\n#+date: %t\n#+filetags: study:%^{topics}")
         :unarrowed t
         )
        ("w" "work" plain (file "~/org/roam/templates/default.org")
         :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+author: %n\n#+date: %t\n#+filetags: work")
         :unarrowed t
         )
        ("i" "issue" plain (file "~/org/roam/templates/issue.org")
         :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+author: %n\n#+date: %t\n#+filetags: issue")
         :unarrowed t
         )))
#+end_src

**** Dailies capture templates
#+begin_src emacs-lisp :tangle ./config.el
(after! org
  (setq org-roam-dailies-capture-templates
        '(("w" "work-todo" plain (file "~/org/roam/templates/work-todo.org")
           :if-new (file+datetree "work-inbox.org" week)
           :unarrowed t))))
#+end_src
**** Org Roam UI
#+begin_src emacs-lisp :tangle yes
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org
  :config
  (setq org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
*** Org safe remote
#+begin_src emacs-lisp :tangle ./config.el
(setq org-safe-remote-resources '("\\`https://fniessen\\.github\\.io\\(?:/\\|\\'\\)"))
#+end_src
*** Org Todos
#+begin_src emacs-lisp :tangle ./config.el
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN-PROGRESS(i@/!)" "|" "DONE(d!)" "WONT-DO(w@/!)")
          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
          (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")
          (sequence "NOTE(N)" "HOLD(h)" "|"))))

(setq org-todo-keyword-faces
      '(("[-]" . +org-todo-active) ("STRT" . +org-todo-active)
        ("[?]" . +org-todo-onhold) ("WAIT" . +org-todo-onhold)
        ("HOLD" . +org-todo-onhold) ("PROJ" . +org-todo-project)
        ("NO" . +org-todo-cancel) ("KILL" . +org-todo-cancel)
        ("NOTE" . flymake-note-echo)))

(setq org-modern-todo-faces
      '(("KILL" :inverse-video t :inherit +org-todo-cancel)
        ("NO" :inverse-video t :inherit +org-todo-cancel)
        ("PROJ" :inverse-video t :inherit +org-todo-project)
        ("HOLD" :inverse-video t :inherit +org-todo-onhold)
        ("WAIT" :inverse-video t :inherit +org-todo-onhold)
        ("[?]" :inverse-video t :inherit +org-todo-onhold)
        ("STRT" :inverse-video t :inherit +org-todo-active)
        ("NOTE" :inverse-video t :inherit flymake-note-echo)
        ("[-]" :inverse-video t :inherit +org-todo-active)))
#+end_src
** Spelling
#+begin_src emacs-lisp :tangle ./config.el
(setq ispell-dictionary "english")
(setq ispell-personal-dictionary "~/home-manager/stow/.config/doom/dict/.pws")
#+end_src
** SSH config mode
#+begin_src emacs-lisp :tangle yes
(use-package! ssh-config-mode
  :defer t
  :config
  (add-to-list 'auto-mode-alist '("/\\.ssh/config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("/sshd?_config\\(\\.d/.*\\.conf\\)?\\'"  . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("/known_hosts\\'"       . ssh-known-hosts-mode))
  (add-to-list 'auto-mode-alist '("/authorized_keys2?\\'" . ssh-authorized-keys-mode)))

(add-hook 'ssh-config-mode-hook 'turn-on-font-lock)
(add-hook 'ssh-config-mode-hook (lambda () (setq-local evil-shift-width ssh-config-mode-indent)))
#+end_src

** Terminal Setup
*** Fish
Setting fish shell paths.
#+BEGIN_SRC emacs-lisp :tangle ./config.el
(setq explicit-shell-file-name
      (cond
       ((eq system-type 'darwin) "/opt/homebrew/bin/fish")
       ((eq system-type 'gnu/linux)
        (let ((cmd (shell-command-to-string "uname -a")))
          (if (string-match "NixOS" cmd)
              "/run/current-system/sw/bin/fish"
            "/bin/fish")))
       (t "/bin/sh")))  ; Default to bourne shell for other systems

(use-package! vterm
  :init
  (setq vterm-shell explicit-shell-file-name)
  (setq vterm-buffer-name-string "vterm: %s"))
#+END_SRC
*** Vterm
**** Set ~libvterm~ path
Setting vterm path.
#+begin_src emacs-lisp :tangle ./config.el
(add-load-path! "~/emacs-libvterm")
#+end_src
** Theme Configuration
*** Modus themes
#+begin_src emacs-lisp :tangle ./config.el
(setq modus-themes-italic-constructs t)
(setq modus-themes-bold-constructs t)
(setq modus-themes-headings
      '((1 . (1.25))
        (2 . (1.15))
        (3 . (1.12))
        (t . (1.05))))

(setq modus-themes-common-palette-overrides
      '((border-mode-line-active bg-mode-line-active)
        (border-mode-line-inactive bg-mode-line-inactive)))

(setq modus-themes-common-palette-overrides
      '((prose-done green-intense)
        (prose-todo red-intense)))
#+end_src
*** Ef-themes
#+begin_src emacs-lisp :tangle yes
(setq ef-themes-headings
      '((1 . (1.25))
        (2 . (1.15))
        (3 . (1.12))
        (t . (1.05))))
#+end_src
** TRAMP
#+begin_src emacs-lisp :tangle ./config.el
(use-package! tramp
  :defer t
  :config
  (setq tramp-inline-compress-start-size 50000)
  (setq tramp-default-method "scp")
  (setq vc-ignore-dir-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                vc-ignore-dir-regexp
                tramp-file-name-regexp))

  (setq lsp-auto-register-remote-clients t)
  (setq lsp-warn-no-matched-clients nil)

  ;; Performance tweaks
  ;; https://coredumped.dev/2025/06/18/making-tramp-go-brrrr./
  (connection-local-set-profile-variables
   'remote-direct-async-process
   '((tramp-direct-async-process . t)))

  (connection-local-set-profiles
   '(:application tramp :protocol "scp")
   'remote-direct-async-process)

  (setq magit-tramp-pipe-stty-settings 'pty)

  (with-eval-after-load 'tramp
    (with-eval-after-load 'compile
      (remove-hook 'compilation-mode-hook #'tramp-compile-disable-ssh-controlmaster-options))))

(defun my/cleanup-tramp ()
  (interactive)
  (progn
    (tramp-cleanup-all-connections)
    (tramp-cleanup-all-buffers)
    (message "The TRAMP is cleaned!")
    ))
#+end_src

** Ultra-scroll
#+begin_src emacs-lisp :tangle ./config.el
(use-package! ultra-scroll
  :init
  (setq scroll-conservatively 101
        scroll-margin 0)
  :config
  (ultra-scroll-mode 1))
#+end_src
** Vertico
#+begin_src emacs-lisp :tangle ./config.el
(use-package! vertico
  :defer t
  :config
  (setq vertico-buffer-display-action '(display-buffer-reuse-window))

  (setq vertico-multiform-categories
        '((symbol (vertico-sort-function . vertico-sort-alpha))
          (file (vertico-sort-function . vertico-sort-history-alpha)
                )))

  (setq vertico-multiform-commands '((org-roam-node-find grid)
                                     (org-roam-node-insert grid)))

  (setq vertico-grid-min-columns 3)
  )

(defvar +vertico-current-arrow t)

;; Arrows on candidates
(cl-defmethod vertico--format-candidate :around
  (cand prefix suffix index start &context ((and +vertico-current-arrow
                                                 (not (bound-and-true-p vertico-flat-mode)))
                                            (eql t)))
  (setq cand (cl-call-next-method cand prefix suffix index start))
  (if (bound-and-true-p vertico-grid-mode)
      (if (= vertico--index index)
          (concat #("▶" 0 1 (face vertico-current)) cand)
        (concat #("_" 0 1 (display " ")) cand))
    (if (= vertico--index index)
        (concat
         #(" " 0 1 (display (left-fringe right-triangle vertico-current)))
         cand)
      cand)))

(use-package! vertico-directory
  :defer t
  :after vertico
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

(use-package! nerd-icons-completion
  :after (marginalia nerd-icons-completion))
#+end_src
** Windows
Setting a keybind for ~ace-select-window~.
#+begin_src emacs-lisp :tangle ./config.el
(map! :leader "wa" #'ace-select-window)
#+end_src
